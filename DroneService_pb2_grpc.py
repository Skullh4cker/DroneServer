# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import DroneService_pb2 as DroneService__pb2


class DroneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendArmDisarm = channel.unary_unary(
                '/com.example.grpc.DroneService/SendArmDisarm',
                request_serializer=DroneService__pb2.ArmDisarm.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                )
        self.SendChangeFlightMode = channel.unary_unary(
                '/com.example.grpc.DroneService/SendChangeFlightMode',
                request_serializer=DroneService__pb2.ChangeFlightMode.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                )
        self.SendNavTakeoff = channel.unary_unary(
                '/com.example.grpc.DroneService/SendNavTakeoff',
                request_serializer=DroneService__pb2.NavTakeoff.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                )
        self.SendReturnToLaunch = channel.unary_unary(
                '/com.example.grpc.DroneService/SendReturnToLaunch',
                request_serializer=DroneService__pb2.ReturnToLaunch.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                )
        self.SendStartMission = channel.unary_unary(
                '/com.example.grpc.DroneService/SendStartMission',
                request_serializer=DroneService__pb2.StartMission.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                )
        self.SendClearAllMissions = channel.unary_unary(
                '/com.example.grpc.DroneService/SendClearAllMissions',
                request_serializer=DroneService__pb2.ClearAllMissions.SerializeToString,
                response_deserializer=DroneService__pb2.MissionAnswer.FromString,
                )
        self.SendFlightPlan = channel.unary_unary(
                '/com.example.grpc.DroneService/SendFlightPlan',
                request_serializer=DroneService__pb2.FlightPlan.SerializeToString,
                response_deserializer=DroneService__pb2.MissionAnswer.FromString,
                )
        self.GetHeartbeat = channel.unary_unary(
                '/com.example.grpc.DroneService/GetHeartbeat',
                request_serializer=DroneService__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=DroneService__pb2.Heartbeat.FromString,
                )
        self.GetDetailedData = channel.unary_unary(
                '/com.example.grpc.DroneService/GetDetailedData',
                request_serializer=DroneService__pb2.DetailedDataRequest.SerializeToString,
                response_deserializer=DroneService__pb2.DetailedData.FromString,
                )


class DroneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendArmDisarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChangeFlightMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNavTakeoff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendReturnToLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStartMission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendClearAllMissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFlightPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDetailedData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendArmDisarm': grpc.unary_unary_rpc_method_handler(
                    servicer.SendArmDisarm,
                    request_deserializer=DroneService__pb2.ArmDisarm.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendChangeFlightMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChangeFlightMode,
                    request_deserializer=DroneService__pb2.ChangeFlightMode.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendNavTakeoff': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNavTakeoff,
                    request_deserializer=DroneService__pb2.NavTakeoff.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendReturnToLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.SendReturnToLaunch,
                    request_deserializer=DroneService__pb2.ReturnToLaunch.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendStartMission': grpc.unary_unary_rpc_method_handler(
                    servicer.SendStartMission,
                    request_deserializer=DroneService__pb2.StartMission.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendClearAllMissions': grpc.unary_unary_rpc_method_handler(
                    servicer.SendClearAllMissions,
                    request_deserializer=DroneService__pb2.ClearAllMissions.FromString,
                    response_serializer=DroneService__pb2.MissionAnswer.SerializeToString,
            ),
            'SendFlightPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFlightPlan,
                    request_deserializer=DroneService__pb2.FlightPlan.FromString,
                    response_serializer=DroneService__pb2.MissionAnswer.SerializeToString,
            ),
            'GetHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeartbeat,
                    request_deserializer=DroneService__pb2.HeartbeatRequest.FromString,
                    response_serializer=DroneService__pb2.Heartbeat.SerializeToString,
            ),
            'GetDetailedData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDetailedData,
                    request_deserializer=DroneService__pb2.DetailedDataRequest.FromString,
                    response_serializer=DroneService__pb2.DetailedData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.example.grpc.DroneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DroneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendArmDisarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendArmDisarm',
            DroneService__pb2.ArmDisarm.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChangeFlightMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendChangeFlightMode',
            DroneService__pb2.ChangeFlightMode.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendNavTakeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendNavTakeoff',
            DroneService__pb2.NavTakeoff.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendReturnToLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendReturnToLaunch',
            DroneService__pb2.ReturnToLaunch.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendStartMission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendStartMission',
            DroneService__pb2.StartMission.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendClearAllMissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendClearAllMissions',
            DroneService__pb2.ClearAllMissions.SerializeToString,
            DroneService__pb2.MissionAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendFlightPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/SendFlightPlan',
            DroneService__pb2.FlightPlan.SerializeToString,
            DroneService__pb2.MissionAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/GetHeartbeat',
            DroneService__pb2.HeartbeatRequest.SerializeToString,
            DroneService__pb2.Heartbeat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDetailedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.DroneService/GetDetailedData',
            DroneService__pb2.DetailedDataRequest.SerializeToString,
            DroneService__pb2.DetailedData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
