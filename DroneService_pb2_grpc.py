# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import DroneService_pb2 as DroneService__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in DroneService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DroneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendArmDisarm = channel.unary_unary(
                '/drone.protocol.DroneService/SendArmDisarm',
                request_serializer=DroneService__pb2.ArmDisarm.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                _registered_method=True)
        self.SendChangeFlightMode = channel.unary_unary(
                '/drone.protocol.DroneService/SendChangeFlightMode',
                request_serializer=DroneService__pb2.ChangeFlightMode.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                _registered_method=True)
        self.SendNavTakeoff = channel.unary_unary(
                '/drone.protocol.DroneService/SendNavTakeoff',
                request_serializer=DroneService__pb2.NavTakeoff.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                _registered_method=True)
        self.SendReturnToLaunch = channel.unary_unary(
                '/drone.protocol.DroneService/SendReturnToLaunch',
                request_serializer=DroneService__pb2.ReturnToLaunch.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                _registered_method=True)
        self.SendStartMission = channel.unary_unary(
                '/drone.protocol.DroneService/SendStartMission',
                request_serializer=DroneService__pb2.StartMission.SerializeToString,
                response_deserializer=DroneService__pb2.LongAnswer.FromString,
                _registered_method=True)
        self.SendClearAllMissions = channel.unary_unary(
                '/drone.protocol.DroneService/SendClearAllMissions',
                request_serializer=DroneService__pb2.ClearAllMissions.SerializeToString,
                response_deserializer=DroneService__pb2.MissionAnswer.FromString,
                _registered_method=True)
        self.SendFlightPlan = channel.unary_unary(
                '/drone.protocol.DroneService/SendFlightPlan',
                request_serializer=DroneService__pb2.FlightPlan.SerializeToString,
                response_deserializer=DroneService__pb2.MissionAnswer.FromString,
                _registered_method=True)
        self.SetName = channel.unary_unary(
                '/drone.protocol.DroneService/SetName',
                request_serializer=DroneService__pb2.NameRequest.SerializeToString,
                response_deserializer=DroneService__pb2.SettingsOperationResponse.FromString,
                _registered_method=True)
        self.UpdateEquipment = channel.unary_unary(
                '/drone.protocol.DroneService/UpdateEquipment',
                request_serializer=DroneService__pb2.EquipmentRequest.SerializeToString,
                response_deserializer=DroneService__pb2.SettingsOperationResponse.FromString,
                _registered_method=True)
        self.AddNewEquipment = channel.unary_unary(
                '/drone.protocol.DroneService/AddNewEquipment',
                request_serializer=DroneService__pb2.NewEquipmentRequest.SerializeToString,
                response_deserializer=DroneService__pb2.SettingsOperationResponse.FromString,
                _registered_method=True)
        self.GetHeartbeat = channel.unary_unary(
                '/drone.protocol.DroneService/GetHeartbeat',
                request_serializer=DroneService__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=DroneService__pb2.Heartbeat.FromString,
                _registered_method=True)
        self.GetDetailedData = channel.unary_unary(
                '/drone.protocol.DroneService/GetDetailedData',
                request_serializer=DroneService__pb2.DetailedDataRequest.SerializeToString,
                response_deserializer=DroneService__pb2.DetailedData.FromString,
                _registered_method=True)
        self.GetSettings = channel.unary_unary(
                '/drone.protocol.DroneService/GetSettings',
                request_serializer=DroneService__pb2.SettingsRequest.SerializeToString,
                response_deserializer=DroneService__pb2.DroneSettings.FromString,
                _registered_method=True)


class DroneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendArmDisarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChangeFlightMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNavTakeoff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendReturnToLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStartMission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendClearAllMissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFlightPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEquipment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNewEquipment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDetailedData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendArmDisarm': grpc.unary_unary_rpc_method_handler(
                    servicer.SendArmDisarm,
                    request_deserializer=DroneService__pb2.ArmDisarm.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendChangeFlightMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChangeFlightMode,
                    request_deserializer=DroneService__pb2.ChangeFlightMode.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendNavTakeoff': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNavTakeoff,
                    request_deserializer=DroneService__pb2.NavTakeoff.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendReturnToLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.SendReturnToLaunch,
                    request_deserializer=DroneService__pb2.ReturnToLaunch.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendStartMission': grpc.unary_unary_rpc_method_handler(
                    servicer.SendStartMission,
                    request_deserializer=DroneService__pb2.StartMission.FromString,
                    response_serializer=DroneService__pb2.LongAnswer.SerializeToString,
            ),
            'SendClearAllMissions': grpc.unary_unary_rpc_method_handler(
                    servicer.SendClearAllMissions,
                    request_deserializer=DroneService__pb2.ClearAllMissions.FromString,
                    response_serializer=DroneService__pb2.MissionAnswer.SerializeToString,
            ),
            'SendFlightPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFlightPlan,
                    request_deserializer=DroneService__pb2.FlightPlan.FromString,
                    response_serializer=DroneService__pb2.MissionAnswer.SerializeToString,
            ),
            'SetName': grpc.unary_unary_rpc_method_handler(
                    servicer.SetName,
                    request_deserializer=DroneService__pb2.NameRequest.FromString,
                    response_serializer=DroneService__pb2.SettingsOperationResponse.SerializeToString,
            ),
            'UpdateEquipment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEquipment,
                    request_deserializer=DroneService__pb2.EquipmentRequest.FromString,
                    response_serializer=DroneService__pb2.SettingsOperationResponse.SerializeToString,
            ),
            'AddNewEquipment': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNewEquipment,
                    request_deserializer=DroneService__pb2.NewEquipmentRequest.FromString,
                    response_serializer=DroneService__pb2.SettingsOperationResponse.SerializeToString,
            ),
            'GetHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeartbeat,
                    request_deserializer=DroneService__pb2.HeartbeatRequest.FromString,
                    response_serializer=DroneService__pb2.Heartbeat.SerializeToString,
            ),
            'GetDetailedData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDetailedData,
                    request_deserializer=DroneService__pb2.DetailedDataRequest.FromString,
                    response_serializer=DroneService__pb2.DetailedData.SerializeToString,
            ),
            'GetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSettings,
                    request_deserializer=DroneService__pb2.SettingsRequest.FromString,
                    response_serializer=DroneService__pb2.DroneSettings.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'drone.protocol.DroneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('drone.protocol.DroneService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DroneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendArmDisarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendArmDisarm',
            DroneService__pb2.ArmDisarm.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendChangeFlightMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendChangeFlightMode',
            DroneService__pb2.ChangeFlightMode.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendNavTakeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendNavTakeoff',
            DroneService__pb2.NavTakeoff.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendReturnToLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendReturnToLaunch',
            DroneService__pb2.ReturnToLaunch.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendStartMission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendStartMission',
            DroneService__pb2.StartMission.SerializeToString,
            DroneService__pb2.LongAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendClearAllMissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendClearAllMissions',
            DroneService__pb2.ClearAllMissions.SerializeToString,
            DroneService__pb2.MissionAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFlightPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SendFlightPlan',
            DroneService__pb2.FlightPlan.SerializeToString,
            DroneService__pb2.MissionAnswer.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/SetName',
            DroneService__pb2.NameRequest.SerializeToString,
            DroneService__pb2.SettingsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEquipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/UpdateEquipment',
            DroneService__pb2.EquipmentRequest.SerializeToString,
            DroneService__pb2.SettingsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddNewEquipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/AddNewEquipment',
            DroneService__pb2.NewEquipmentRequest.SerializeToString,
            DroneService__pb2.SettingsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/GetHeartbeat',
            DroneService__pb2.HeartbeatRequest.SerializeToString,
            DroneService__pb2.Heartbeat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDetailedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/GetDetailedData',
            DroneService__pb2.DetailedDataRequest.SerializeToString,
            DroneService__pb2.DetailedData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.protocol.DroneService/GetSettings',
            DroneService__pb2.SettingsRequest.SerializeToString,
            DroneService__pb2.DroneSettings.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
